[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Questions",
        "importPath": "app.questions.models",
        "description": "app.questions.models",
        "isExtraImport": true,
        "detail": "app.questions.models",
        "documentation": {}
    },
    {
        "label": "Questions",
        "importPath": "app.questions.models",
        "description": "app.questions.models",
        "isExtraImport": true,
        "detail": "app.questions.models",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "QuestionsDAO",
        "importPath": "app.questions.dao",
        "description": "app.questions.dao",
        "isExtraImport": true,
        "detail": "app.questions.dao",
        "documentation": {}
    },
    {
        "label": "QuestionsDAO",
        "importPath": "app.questions.dao",
        "description": "app.questions.dao",
        "isExtraImport": true,
        "detail": "app.questions.dao",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "add_questions",
        "importPath": "app.questions.question_api",
        "description": "app.questions.question_api",
        "isExtraImport": true,
        "detail": "app.questions.question_api",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.questions.router",
        "description": "app.questions.router",
        "isExtraImport": true,
        "detail": "app.questions.router",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "app.migrations.versions.c0d921515e31_first_revision",
        "description": "app.migrations.versions.c0d921515e31_first_revision",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('questions',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('question', sa.String(), nullable=False),\n    sa.Column('answer', sa.String(), nullable=False),\n    sa.Column('creation_date', sa.Date(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "app.migrations.versions.c0d921515e31_first_revision",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "app.migrations.versions.c0d921515e31_first_revision",
        "description": "app.migrations.versions.c0d921515e31_first_revision",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('questions')\n    # ### end Alembic commands ###",
        "detail": "app.migrations.versions.c0d921515e31_first_revision",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "config = context.config\n# config.set_main_option(\"sqlalchemy.url\", f\"{settings.DATABASE_URL}?async_fallback=True\")\nconfig.set_main_option(\"sqlalchemy.url\", f'postgresql+asyncpg://{environ.get(\"POSTGRES_USER\", \"yateam\")}:{environ.get(\"POSTGRES_PASSWORD\", \"yateam\")}@{environ.get(\"POSTGRES_HOST\", \"localhost\")}:{environ.get(\"POSTGRES_PORT\", \"5432\")}/{environ.get(\"POSTGRES_DB\", \"yateam\")}?async_fallback=True')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "app.migrations.env",
        "description": "app.migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "app.migrations.env",
        "documentation": {}
    },
    {
        "label": "QuestionsDAO",
        "kind": 6,
        "importPath": "app.questions.dao",
        "description": "app.questions.dao",
        "peekOfCode": "class QuestionsDAO:\n    @classmethod\n    async def add_question(cls, **data):\n        async with async_session_maker() as session:\n            query = insert(Questions).values(**data)\n            await session.execute(query)\n            await session.commit()\n    @classmethod\n    async def find_by_id(cls, model_id: int):\n        async with async_session_maker() as session:",
        "detail": "app.questions.dao",
        "documentation": {}
    },
    {
        "label": "Questions",
        "kind": 6,
        "importPath": "app.questions.models",
        "description": "app.questions.models",
        "peekOfCode": "class Questions(Base):\n    __tablename__ = \"questions\"\n    id = Column(Integer, primary_key=True)\n    question = Column(String, nullable=False)\n    answer = Column(String, nullable=False)\n    creation_date = Column(Date, default=date.today)",
        "detail": "app.questions.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.questions.router",
        "description": "app.questions.router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/questions\",\n    tags=[\"questions\"]\n)\n@router.post(\"\")\nasync def post_questions(questions: int):\n    latest_question = await QuestionsDAO.get_latest_question()\n    await add_questions(questions)\n    return latest_question",
        "detail": "app.questions.router",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_HOST:str = \"\"\n    DB_PORT:int = 0\n    DB_USER:str = \"\"\n    DB_PASS:str = \"\"\n    DB_NAME:str = \"\"\n    @property\n    def DATABASE_URL(self):\n        return (f'postgresql+asyncpg://{self.DB_USER}:'\n                f'{self.DB_PASS}@{self.DB_HOST}:'",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "engine = create_async_engine(f'postgresql+asyncpg://{environ.get(\"POSTGRES_USER\")}:{environ.get(\"POSTGRES_PASSWORD\")}@{environ.get(\"POSTGRES_HOST\")}:{environ.get(\"POSTGRES_PORT\")}/{environ.get(\"POSTGRES_DB\")}')\nasync_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(question_router)",
        "detail": "app.main",
        "documentation": {}
    }
]